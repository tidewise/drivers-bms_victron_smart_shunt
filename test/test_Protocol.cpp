#include <bms_victron_smart_shunt/Protocol.hpp>
#include <gtest/gtest.h>
#include <iostream>

using namespace bms_victron_smart_shunt;
using namespace protocol;
using namespace std;

struct ProtocolTest : public ::testing::Test {
    std::vector<uint8_t> buffer;
    ProtocolTest()
    {
        buffer.resize(256, 0);
    }
};

TEST_F(ProtocolTest, it_waits_for_more_bytes_if_the_buffer_is_too_small)
{
    ASSERT_EQ(0, protocol::extractPacket(&buffer[0], 4));
}
TEST_F(ProtocolTest, it_finds_a_packet_start_within_the_packet)
{
    buffer[5] = protocol::PACKET_START_MARKER;
    buffer[6] = protocol::PACKET_START_MARKER;
    ASSERT_EQ(-5, protocol::extractPacket(&buffer[0], 20));
}
TEST_F(ProtocolTest, it_handles_a_start_byte_at_the_very_end_of_the_buffer)
{
    buffer[19] = PACKET_START_MARKER;
    ASSERT_EQ(-19, protocol::extractPacket(&buffer[0], 20));
}
TEST_F(ProtocolTest, it_accepts_a_packet)
{
    std::vector<uint8_t> buffer = {0x0d,
        0x0a,
        0x50,
        0x49,
        0x44,
        0x09,
        0x30,
        0x78,
        0x32,
        0x30,
        0x33,
        0x0d,
        0x0a,
        0x56,
        0x09,
        0x32,
        0x36,
        0x32,
        0x30,
        0x31,
        0x0d,
        0x0a,
        0x49,
        0x09,
        0x30,
        0x0d,
        0x0a,
        0x50,
        0x09,
        0x30,
        0x0d,
        0x0a,
        0x43,
        0x45,
        0x09,
        0x30,
        0x0d,
        0x0a,
        0x53,
        0x4f,
        0x43,
        0x09,
        0x31,
        0x30,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x54,
        0x54,
        0x47,
        0x09,
        0x2d,
        0x31,
        0x0d,
        0x0a,
        0x41,
        0x6c,
        0x61,
        0x72,
        0x6d,
        0x09,
        0x4f,
        0x46,
        0x46,
        0x0d,
        0x0a,
        0x52,
        0x65,
        0x6c,
        0x61,
        0x79,
        0x09,
        0x4f,
        0x46,
        0x46,
        0x0d,
        0x0a,
        0x41,
        0x52,
        0x09,
        0x30,
        0x0d,
        0x0a,
        0x42,
        0x4d,
        0x56,
        0x09,
        0x37,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x46,
        0x57,
        0x09,
        0x30,
        0x33,
        0x30,
        0x37,
        0x0d,
        0x0a,
        0x43,
        0x68,
        0x65,
        0x63,
        0x6b,
        0x73,
        0x75,
        0x6d,
        0x09,
        0xd8};
    ASSERT_EQ(112, extractPacket(&buffer[0], 112));
}

TEST_F(ProtocolTest, it_parses_the_feedback)
{
    // packet without checksum field
    std::vector<uint8_t> buffer = {0x0d,
        0x0a,
        0x50,
        0x49,
        0x44,
        0x09,
        0x30,
        0x78,
        0x32,
        0x30,
        0x34,
        0x0d,
        0x0a,
        0x56,
        0x09,
        0x33,
        0x32,
        0x34,
        0x35,
        0x36,
        0x0d,
        0x0a,
        0x56,
        0x32,
        0x09,
        0x33,
        0x31,
        0x32,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x56,
        0x33,
        0x09,
        0x32,
        0x39,
        0x38,
        0x37,
        0x36,
        0x0d,
        0x0a,
        0x56,
        0x53,
        0x09,
        0x31,
        0x34,
        0x34,
        0x35,
        0x30,
        0x0d,
        0x0a,
        0x56,
        0x4d,
        0x09,
        0x31,
        0x35,
        0x35,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x44,
        0x4d,
        0x09,
        0x35,
        0x0d,
        0x0a,
        0x56,
        0x50,
        0x56,
        0x09,
        0x32,
        0x30,
        0x38,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x50,
        0x50,
        0x56,
        0x09,
        0x31,
        0x32,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x49,
        0x09,
        0x34,
        0x35,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x49,
        0x32,
        0x09,
        0x33,
        0x30,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x49,
        0x33,
        0x09,
        0x32,
        0x35,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x49,
        0x4c,
        0x09,
        0x33,
        0x35,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x4c,
        0x4f,
        0x41,
        0x44,
        0x09,
        0x4f,
        0x4e,
        0x0d,
        0x0a,
        0x54,
        0x09,
        0x32,
        0x37,
        0x0d,
        0x0a,
        0x50,
        0x09,
        0x36,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x43,
        0x45,
        0x09,
        0x31,
        0x35,
        0x32,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x53,
        0x4f,
        0x43,
        0x09,
        0x38,
        0x35,
        0x0d,
        0x0a,
        0x54,
        0x54,
        0x47,
        0x09,
        0x31,
        0x32,
        0x30,
        0x0d,
        0x0a,
        0x41,
        0x6c,
        0x61,
        0x72,
        0x6d,
        0x09,
        0x4f,
        0x4e,
        0x0d,
        0x0a,
        0x52,
        0x65,
        0x6c,
        0x61,
        0x79,
        0x09,
        0x4f,
        0x4e,
        0x0d,
        0x0a,
        0x41,
        0x52,
        0x09,
        0x31,
        0x0d,
        0x0a,
        0x4f,
        0x52,
        0x09,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x31,
        0x09,
        0x31,
        0x32,
        0x30,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x32,
        0x09,
        0x38,
        0x30,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x33,
        0x09,
        0x31,
        0x30,
        0x30,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x34,
        0x09,
        0x33,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x35,
        0x09,
        0x31,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x36,
        0x09,
        0x33,
        0x35,
        0x30,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x37,
        0x09,
        0x31,
        0x31,
        0x30,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x38,
        0x09,
        0x31,
        0x36,
        0x30,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x39,
        0x09,
        0x33,
        0x34,
        0x35,
        0x36,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x31,
        0x30,
        0x09,
        0x35,
        0x0d,
        0x0a,
        0x48,
        0x31,
        0x31,
        0x09,
        0x32,
        0x0d,
        0x0a,
        0x48,
        0x31,
        0x32,
        0x09,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x31,
        0x33,
        0x09,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x31,
        0x34,
        0x09,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x31,
        0x35,
        0x09,
        0x31,
        0x31,
        0x30,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x31,
        0x36,
        0x09,
        0x31,
        0x36,
        0x30,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x31,
        0x37,
        0x09,
        0x35,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x31,
        0x38,
        0x09,
        0x33,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x31,
        0x39,
        0x09,
        0x31,
        0x35,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x32,
        0x30,
        0x09,
        0x35,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x32,
        0x31,
        0x09,
        0x38,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x32,
        0x32,
        0x09,
        0x34,
        0x30,
        0x0d,
        0x0a,
        0x48,
        0x32,
        0x33,
        0x09,
        0x37,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x45,
        0x52,
        0x52,
        0x09,
        0x30,
        0x0d,
        0x0a,
        0x43,
        0x53,
        0x09,
        0x4f,
        0x4b,
        0x0d,
        0x0a,
        0x42,
        0x4d,
        0x56,
        0x09,
        0x37,
        0x30,
        0x78,
        0x0d,
        0x0a,
        0x46,
        0x57,
        0x09,
        0x30,
        0x34,
        0x30,
        0x38,
        0x0d,
        0x0a,
        0x46,
        0x57,
        0x45,
        0x09,
        0x30,
        0x34,
        0x30,
        0x38,
        0x30,
        0x34,
        0x0d,
        0x0a,
        0x53,
        0x45,
        0x52,
        0x23,
        0x09,
        0x41,
        0x42,
        0x43,
        0x0d,
        0x0a,
        0x48,
        0x53,
        0x44,
        0x53,
        0x09,
        0x32,
        0x32,
        0x30,
        0x0d,
        0x0a,
        0x4d,
        0x4f,
        0x44,
        0x45,
        0x09,
        0x4e,
        0x6f,
        0x72,
        0x6d,
        0x61,
        0x6c,
        0x0d,
        0x0a,
        0x41,
        0x43,
        0x5f,
        0x4f,
        0x55,
        0x54,
        0x5f,
        0x56,
        0x09,
        0x32,
        0x33,
        0x30,
        0x0d,
        0x0a,
        0x41,
        0x43,
        0x5f,
        0x4f,
        0x55,
        0x54,
        0x5f,
        0x49,
        0x09,
        0x35,
        0x2e,
        0x35,
        0x0d,
        0x0a,
        0x41,
        0x43,
        0x5f,
        0x4f,
        0x55,
        0x54,
        0x5f,
        0x53,
        0x09,
        0x31,
        0x32,
        0x36,
        0x35,
        0x0d,
        0x0a,
        0x57,
        0x41,
        0x52,
        0x4e,
        0x09,
        0x4e,
        0x6f,
        0x6e,
        0x65,
        0x0d,
        0x0a,
        0x4d,
        0x50,
        0x50,
        0x54,
        0x09,
        0x41,
        0x63,
        0x74,
        0x69,
        0x76,
        0x65,
        0x0d,
        0x0a,
        0x4d,
        0x4f,
        0x4e,
        0x09,
        0x2d,
        0x32,
        0x0d,
        0x0a,
        0x44,
        0x43,
        0x5f,
        0x49,
        0x4e,
        0x5f,
        0x56,
        0x09,
        0x30,
        0x34,
        0x38,
        0x0d,
        0x0a,
        0x44,
        0x43,
        0x5f,
        0x49,
        0x4e,
        0x5f,
        0x49,
        0x09,
        0x32,
        0x30,
        0x0d,
        0x0a,
        0x44,
        0x43,
        0x5f,
        0x49,
        0x4e,
        0x5f,
        0x50,
        0x09,
        0x39,
        0x36,
        0x30,
        0x30,
        0x0d,
        0x0a,
        0x43,
        0x68,
        0x65,
        0x63,
        0x6b,
        0x73,
        0x75,
        0x6d,
        0x09,
        0x0d};

    // TODO: Is a buffer of this size ok?
    auto feedback = parseFields(&buffer[0], 610);
    ASSERT_EQ(feedback.voltage, 32456);
    ASSERT_EQ(feedback.auxiliary_voltage, 14450);
    ASSERT_EQ(feedback.mid_point_voltage, 15500);
    ASSERT_EQ(feedback.mid_point_deviation, 5);
    ASSERT_EQ(feedback.current, 4500);
    ASSERT_EQ(feedback.temperature, 27);
    ASSERT_EQ(feedback.intantaneous_power, 600);
    ASSERT_EQ(feedback.consumed_charge, 15200);
    ASSERT_EQ(feedback.state_of_charge, 85);
    ASSERT_EQ(feedback.time_to_go, 120);
    ASSERT_EQ(feedback.alarm_condition_active, "ON");
    ASSERT_EQ(feedback.relay_state, "ON");
    ASSERT_EQ(feedback.alarm_reason, 1);
    ASSERT_EQ(feedback.deepest_discharge_depth, 12000);
    ASSERT_EQ(feedback.last_discharge_depth, 8000);
    ASSERT_EQ(feedback.average_discharge_depth, 10000);
    ASSERT_EQ(feedback.charge_cycles_number, 300);
    ASSERT_EQ(feedback.full_discharges_number, 10);
    ASSERT_EQ(feedback.cumulative_charge_drawn, 35000);
    ASSERT_EQ(feedback.minimum_voltage, 11000);
    ASSERT_EQ(feedback.maximum_voltage, 16000);
    ASSERT_EQ(feedback.seconds_since_last_full_charge, 345600);
    ASSERT_EQ(feedback.automatic_synchronizations_number, 5);
    ASSERT_EQ(feedback.low_voltage_alarms_number, 2);
    ASSERT_EQ(feedback.high_voltage_alarms_number, 0);
    ASSERT_EQ(feedback.minimum_auxiliary_voltage, 0);
    ASSERT_EQ(feedback.maximum_auxiliary_voltage, 0);
    ASSERT_EQ(feedback.h17, 500);
    ASSERT_EQ(feedback.h18, 300);
    // todo check MD
    ASSERT_EQ(feedback.model_description, "F");
    // todo check
    ASSERT_EQ(feedback.firmware_version, "d");
    // todo check
    ASSERT_EQ(feedback.product_id, 0);
    ASSERT_EQ(feedback.dc_monitor_mode, DCMonitorMode::ACCharger);
}